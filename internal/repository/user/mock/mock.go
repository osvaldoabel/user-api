// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package repoMock is a generated GoMock package.
package repoMock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/osvaldoabel/user-api/internal/entity"
)

// MockReaderRepository is a mock of ReaderRepository interface.
type MockReaderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockReaderRepositoryMockRecorder
}

// MockReaderRepositoryMockRecorder is the mock recorder for MockReaderRepository.
type MockReaderRepositoryMockRecorder struct {
	mock *MockReaderRepository
}

// NewMockReaderRepository creates a new mock instance.
func NewMockReaderRepository(ctrl *gomock.Controller) *MockReaderRepository {
	mock := &MockReaderRepository{ctrl: ctrl}
	mock.recorder = &MockReaderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReaderRepository) EXPECT() *MockReaderRepositoryMockRecorder {
	return m.recorder
}

// FindAll mocks base method.
func (m *MockReaderRepository) FindAll(params entity.Pagination) (*entity.Pagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", params)
	ret0, _ := ret[0].(*entity.Pagination)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockReaderRepositoryMockRecorder) FindAll(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockReaderRepository)(nil).FindAll), params)
}

// FindByEmail mocks base method.
func (m *MockReaderRepository) FindByEmail(email entity.Email) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", email)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockReaderRepositoryMockRecorder) FindByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockReaderRepository)(nil).FindByEmail), email)
}

// FindByID mocks base method.
func (m *MockReaderRepository) FindByID(id entity.ID) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockReaderRepositoryMockRecorder) FindByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockReaderRepository)(nil).FindByID), id)
}

// MockWriterRepository is a mock of WriterRepository interface.
type MockWriterRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWriterRepositoryMockRecorder
}

// MockWriterRepositoryMockRecorder is the mock recorder for MockWriterRepository.
type MockWriterRepositoryMockRecorder struct {
	mock *MockWriterRepository
}

// NewMockWriterRepository creates a new mock instance.
func NewMockWriterRepository(ctrl *gomock.Controller) *MockWriterRepository {
	mock := &MockWriterRepository{ctrl: ctrl}
	mock.recorder = &MockWriterRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriterRepository) EXPECT() *MockWriterRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockWriterRepository) Delete(id entity.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockWriterRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockWriterRepository)(nil).Delete), id)
}

// Insert mocks base method.
func (m *MockWriterRepository) Insert(user entity.User) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", user)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockWriterRepositoryMockRecorder) Insert(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockWriterRepository)(nil).Insert), user)
}

// Update mocks base method.
func (m *MockWriterRepository) Update(user entity.User) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", user)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockWriterRepositoryMockRecorder) Update(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockWriterRepository)(nil).Update), user)
}

// MockUserDBRepository is a mock of UserDBRepository interface.
type MockUserDBRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserDBRepositoryMockRecorder
}

// MockUserDBRepositoryMockRecorder is the mock recorder for MockUserDBRepository.
type MockUserDBRepositoryMockRecorder struct {
	mock *MockUserDBRepository
}

// NewMockUserDBRepository creates a new mock instance.
func NewMockUserDBRepository(ctrl *gomock.Controller) *MockUserDBRepository {
	mock := &MockUserDBRepository{ctrl: ctrl}
	mock.recorder = &MockUserDBRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDBRepository) EXPECT() *MockUserDBRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockUserDBRepository) Delete(id entity.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserDBRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserDBRepository)(nil).Delete), id)
}

// FindAll mocks base method.
func (m *MockUserDBRepository) FindAll(params entity.Pagination) (*entity.Pagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", params)
	ret0, _ := ret[0].(*entity.Pagination)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockUserDBRepositoryMockRecorder) FindAll(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockUserDBRepository)(nil).FindAll), params)
}

// FindByEmail mocks base method.
func (m *MockUserDBRepository) FindByEmail(email entity.Email) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", email)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockUserDBRepositoryMockRecorder) FindByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockUserDBRepository)(nil).FindByEmail), email)
}

// FindByID mocks base method.
func (m *MockUserDBRepository) FindByID(id entity.ID) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockUserDBRepositoryMockRecorder) FindByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockUserDBRepository)(nil).FindByID), id)
}

// Insert mocks base method.
func (m *MockUserDBRepository) Insert(user entity.User) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", user)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockUserDBRepositoryMockRecorder) Insert(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockUserDBRepository)(nil).Insert), user)
}

// Update mocks base method.
func (m *MockUserDBRepository) Update(user entity.User) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", user)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockUserDBRepositoryMockRecorder) Update(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserDBRepository)(nil).Update), user)
}
